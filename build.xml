<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="jar" name="testPack">

<property name="lib.dir" value="lib"/>  
    <property name="src.dir" value="src"/>  
    <property name="classes.dir" value="bin"/>  
  
    <property name="output.dir" value="out"/>  
    <property name="jarname" value="Test.jar"/>  
    <property name="mainclass" value="testPack.testPack"/>  
  
    <!-- 第三方jar包的路径 -->  
    <path id="lib-classpath">  
        <fileset dir="${lib.dir}">  
            <include name="**/*.jar"/>  
        </fileset>  
    </path>  
  


    <!-- 1. 初始化工作，如创建目录等 -->  
    <target name="init">  
        <mkdir dir="${classes.dir}"/>  
        <mkdir dir="${output.dir}"/>  
    </target>  
  
    <!-- 2. 编译 -->  
    <target name="compile" depends="init">  
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="true">  
            <compilerarg line="-encoding UTF-8"/>  
            <classpath refid="lib-classpath"/>  
        </javac>  
    </target>  
  
    <!-- 3. 打包jar文件 -->  
    <target name="jar" depends="compile">  
        <copy todir="${output.dir}/lib">  
            <fileset dir="${lib.dir}"/>  
        </copy>  
  
        <!--Create a property containing all .jar files,  
        prefix lib/, and seperated with a space-->  
        <pathconvert property="mf.classpath" pathsep=" ">  
            <mapper>  
                <chainedmapper>  
                    <!-- jar包文件只留文件名，去掉目录信息 -->  
                    <flattenmapper/>  
                    <!-- add lib/ prefix -->  
                    <globmapper from="*" to="lib/*"/>  
                </chainedmapper>  
            </mapper>  
            <path refid="lib-classpath"/>  
         </pathconvert>  
  
        <!-- jar文件的输出路径 -->  
        <jar destfile="${output.dir}/${jarname}" basedir="${classes.dir}">  
            <manifest>  
                <attribute name="Main-class" value="${mainclass}"/>  
                <attribute name="Class-Path" value="${mf.classpath}"/>  
            </manifest>  
        </jar>  
    </target>  
                <!--运行一下jar包，试试看效果-->  
              <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>         	

           	<target name="findbugs" depends="jar">
           		
           	    <findbugs home="/usr/local/findbugs/lib"
           	              output="xml:withMessages"
           	              outputFile="${basedir}/findbugs.xml" >
           	      <sourcePath path="${basedir}/src/testPack" />
           	      <class location="${output.dir}/${jarname}" />
           	    </findbugs>
           	  </target>


                  <!-- - - - - - - - - - - - - - - - - - 
        ceshi junit
    - - - - - - - - - - - - - - - - - --> 
  <property name="lib.dir"     value="lib"/>
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="out.dir" value="out"/>
  <property name="class.dir" value="classes"/>
  <target name="clean">
    <delete dir="${out.dir}"/>
  </target>
  <target name="compile_test">
    <mkdir dir="${out.dir}/${class.dir}"/>
    <javac srcdir="${src.dir}" destdir="${out.dir}/${class.dir}"/>
 </target>
 <target name="compile.tests" depends="compile_test">
     <mkdir dir="${test.dir}"/>

    <mkdir dir="${out.dir}/${test.dir}"/>
    <javac srcdir="${test.dir}" destdir="${out.dir}/${test.dir}">
      <classpath>
        <pathelement path="${out.dir}/${class.dir}"/>
      </classpath>
    </javac>
    <junit>
      <classpath>
        <pathelement path="${out.dir}/${class.dir}"/>
        <pathelement path="${out.dir}/${test.dir}"/>
      </classpath>
     <formatter type="plain"/>
      <formatter type="xml"/>

      <batchtest fork="yes" todir="${out.dir}">
        <fileset dir="${src.dir}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
	 
</project>
